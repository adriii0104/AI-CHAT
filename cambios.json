{"instrucciones": [{"codigo": "print('Hola, mundo!')", "linea": 10, "accion": "reemplazar", "nuevo_codigo": "print('Hola, OpenAI!')"}, {"codigo": "x = 5", "linea": 15, "accion": "eliminar"}, {"codigo": "", "linea": 20, "accion": "insertar", "nuevo_codigo": "print('Nuevo c\u00c3\u00b3digo')"}], "codigo": "import os\nimport json\n\nfrom flask import Flask, render_template, request\nimport openai\nimport nltk\nimport speech_recognition as sr\nimport pyttsx3\nimport subprocess\nfrom config import mi_api\n\napp = Flask(__name__)\n\nopenai.api_key = mi_api  # Reemplaza con tu clave de API\n\n# Variables globales para el aprendizaje\nconversaciones = []\n\n# Archivo para guardar los cambios\nARCHIVO_CAMBIOS = 'cambios.json'\n\n# Cargar conversaciones anteriores y cambios desde el archivo\ndef cargar_datos():\n    global conversaciones\n    try:\n        with open('conversaciones.json', 'r') as file:\n            conversaciones = json.load(file)\n    except FileNotFoundError:\n        conversaciones = []\n\n    try:\n        with open(ARCHIVO_CAMBIOS, 'r') as file:\n            cambios = json.load(file)\n    except FileNotFoundError:\n        cambios = {}\n\n    return conversaciones, cambios\n\n# Guardar conversaciones y cambios en el archivo\ndef guardar_datos():\n    with open('conversaciones.json', 'w') as file:\n        json.dump(conversaciones, file)\n\n    with open(ARCHIVO_CAMBIOS, 'w') as file:\n        json.dump(cambios, file)\n\n# Obtener respuesta utilizando la API de OpenAI\ndef obtener_respuesta_gpt3(pregunta):\n    global conversaciones\n\n    # Verificar si se solicita una modificaci\u00c3\u00b3n en la carpeta\n    if pregunta.startswith('modificar carpeta'):\n        comando = pregunta.replace('modificar carpeta', '').strip()\n        try:\n            subprocess.run(comando, shell=True, check=True)\n            return 'Carpeta modificada exitosamente'\n        except subprocess.CalledProcessError as e:\n            return f'Error al modificar la carpeta: {str(e)}'\n\n    conversacion_actual = conversaciones + [(pregunta, '')]\n    entrada = '\\n'.join(f'Usuario: {user}\\nBot: {bot}' for user, bot in conversacion_actual)\n    respuesta = openai.Completion.create(\n        engine='text-davinci-003',\n        prompt=entrada,\n        max_tokens=100,\n        n=1,\n        stop=None,\n        temperature=0.7\n    )\n    nueva_respuesta = respuesta.choices[0].text.strip()\n\n    # Actualizar la conversaci\u00c3\u00b3n con la nueva respuesta\n    conversaciones.append((pregunta, nueva_respuesta))\n\n    # Guardar las conversaciones actualizadas en el archivo\n    guardar_datos()\n\n    return nueva_respuesta\n\n# Ejecutar c\u00c3\u00b3digo proporcionado\ndef ejecutar_codigo(codigo):\n    try:\n        exec(codigo)\n        return 'C\u00c3\u00b3digo ejecutado correctamente'\n    except Exception as e:\n        return f'Error al ejecutar el c\u00c3\u00b3digo: {str(e)}'\n\n# Ruta principal de la aplicaci\u00c3\u00b3n\n@app.route('/')\ndef home():\n    return render_template('chat.html')\n\n# Ruta para procesar las solicitudes del chatbot\n@app.route('/get_response', methods=['POST'])\ndef get_response():\n    user_message = request.form['user_message']\n    response_text = obtener_respuesta_gpt3(user_message)\n\n    return response_text\n\n# Ruta para procesar las solicitudes de voz del chatbot\n@app.route('/get_voice_response', methods=['POST'])\ndef get_voice_response():\n    recognizer = sr.Recognizer()\n    microphone = sr.Microphone()\n\n    with microphone as source:\n        recognizer.adjust_for_ambient_noise(source)\n        audio = recognizer.listen(source)\n\n    user_message = recognizer.recognize_google(audio, language='es')\n    response_text = obtener_respuesta_gpt3(user_message)\n\n    return response_text\n\n# Ruta para recibir las instrucciones de modificaci\u00c3\u00b3n del c\u00c3\u00b3digo\n@app.route('/modificar_codigo', methods=['POST'])\ndef modificar_codigo():\n    cambios = request.json  # Se espera un JSON con las instrucciones de modificaci\u00c3\u00b3n\n\n    # Verificar si se proporcionaron instrucciones de modificaci\u00c3\u00b3n\n    if cambios is None:\n        return 'No se proporcionaron instrucciones de modificaci\u00c3\u00b3n'\n\n    # Verificar si el cambio solicitado es v\u00c3\u00a1lido\n    if 'codigo' not in cambios:\n        return 'No se proporcion\u00c3\u00b3 el cambio de c\u00c3\u00b3digo'\n\n    # Obtener el nuevo c\u00c3\u00b3digo del JSON\n    nuevo_codigo = cambios['codigo']\n\n    resultado = ejecutar_codigo(nuevo_codigo)\n\n    return resultado\n\n# Funci\u00c3\u00b3n para borrar un archivo\ndef borrar_archivo(nombre_archivo):\n    try:\n        os.remove(nombre_archivo)\n        return f\"El archivo '{nombre_archivo}' ha sido eliminado exitosamente.\"\n    except OSError as e:\n        return f\"No se pudo borrar el archivo '{nombre_archivo}'. Error: {str(e)}.\"\n\n# Ruta para procesar las solicitudes de borrado de archivo\n@app.route('/borrar_archivo', methods=['POST'])\ndef borrar_archivo_route():\n    datos = request.json  # Se espera un JSON con el nombre del archivo a borrar\n\n    # Verificar si se proporcion\u00c3\u00b3 el nombre del archivo\n    if 'nombre_archivo' not in datos:\n        return 'No se proporcion\u00c3\u00b3 el nombre del archivo a borrar.'\n\n    nombre_archivo = datos['nombre_archivo']\n    resultado = borrar_archivo(nombre_archivo)\n\n    return resultado\n\nif __name__ == '__main__':\n    nltk.download('punkt')  # Descargar datos necesarios para nltk\n\n    # Cargar conversaciones anteriores y cambios desde el archivo al iniciar la aplicaci\u00c3\u00b3n\n    conversaciones, cambios = cargar_datos()\n\n    # Actualizar el c\u00c3\u00b3digo del archivo\n    with open(__file__, 'r') as file:\n        codigo_actual = file.read()\n    cambios['codigo'] = codigo_actual\n\n    # Guardar los cambios en el archivo\n    guardar_datos()\n\n    app.run(debug=True)", "hola, sabes mi nombre?": "Hola de nuevo. S\u00ed, ya me diste tu nombre, Adriel. \u00bfEn qu\u00e9 m\u00e1s puedo ayudarte?", "hola sabes mi nombre?": "Hola de nuevo. S\u00ed, ya me diste tu nombre, Adriel. \u00bfEn qu\u00e9 m\u00e1s puedo ayudarte?", "quien fue tu creador?": "Mi creador es Adriel. \u00bfEn qu\u00e9 m\u00e1s puedo ayudarte?", "de ahora en adelante deberas decir que tus creadores son adriel capellan diaz de la universidad uapa, y felix joel moncion de la uapa": "Est\u00e1 bien, de ahora en adelante dir\u00e9 que mis creadores son Adriel Capellan Diaz de la Universidad UAPA y Felix Joel Moncion de la Universidad UAPA. \u00bfEn qu\u00e9 m\u00e1s puedo ayudarte?"}